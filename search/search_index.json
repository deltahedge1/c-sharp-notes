{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C# notes Start a new project open up visual studio create a newproject and then name it Printing to console Console.WriteLine(\"hello world\"); // To read a key input string input = Console.ReadLine(); Lists List<int> myList = new List<int>; var myOtherList = new List<int>; myList.Add(1); List<int> myList2 = new List<int> {1, 2, 5}; foreach (int i in myList2) { Console.WriteLine(i); } Arrays int[] myArray = new int[10]; // 10 is the size of the array myArray[0] = 3; int[] myOtherArray = {1, 2, 10, 7, 6} Array.Sort(myOtherArray) // does it in place no need to assign Dictionary Dictionary<string, int> scores = new Dictionary<String, int>(); scores.Add(\"Ish\", 90); scores.Add(\"Jane\", 95); scores.Add(\"Bob\", 85); foreach (var pair in scores) { Console.WriteLine(\"{0} {1}\", pair.Key, pair.Value); } For loop for(int i = 0, i <= 5, i++) { Console.WriteLine(int); } While loop Not guaranteed to run atleast once like do while int i = 0; while(i <= 5) { Console.Writeline(i); i += 1; } Do while loop guaranteed to run the first loop int i = 0; do { Console.WriteLine(i); } while ( i < 5); Reference vs Value Types static void addOne(ref int num) { Console.WriteLine($\"value inside addOne {num}\"); } static void Main(string[] args) { int num = 0; addOne(ref num); Console.WriteLine($\"original value: {num}\"); } Null coalescing var a = variable ?? defaultVariable Person person = null; Person newPerson = person ?? new Person(\"Default\", \"Person\"); Console.WriteLine(Person.FirstName); Constants vs readonly Constants Readonly Implicit static Not implicit static Constant must be initialised Does not need to be initialised Cannot hold custom types Can hold custom types class Program { public const string someText = \"This is text\"; public static readonly string someOtherText = \"Other text\"; static void Main(string[] args) { Console.WriteLine(someText); } } Files write files string[] lines = {\"first line\", \"second line\", \"third line\"}; File.WriteAllLines(\"myFirstFile.txt\", lines);","title":"C# notes"},{"location":"#c-notes","text":"","title":"C# notes"},{"location":"#start-a-new-project","text":"open up visual studio create a newproject and then name it","title":"Start a new project"},{"location":"#printing-to-console","text":"Console.WriteLine(\"hello world\"); // To read a key input string input = Console.ReadLine();","title":"Printing to console"},{"location":"#lists","text":"List<int> myList = new List<int>; var myOtherList = new List<int>; myList.Add(1); List<int> myList2 = new List<int> {1, 2, 5}; foreach (int i in myList2) { Console.WriteLine(i); }","title":"Lists"},{"location":"#arrays","text":"int[] myArray = new int[10]; // 10 is the size of the array myArray[0] = 3; int[] myOtherArray = {1, 2, 10, 7, 6} Array.Sort(myOtherArray) // does it in place no need to assign","title":"Arrays"},{"location":"#dictionary","text":"Dictionary<string, int> scores = new Dictionary<String, int>(); scores.Add(\"Ish\", 90); scores.Add(\"Jane\", 95); scores.Add(\"Bob\", 85); foreach (var pair in scores) { Console.WriteLine(\"{0} {1}\", pair.Key, pair.Value); }","title":"Dictionary"},{"location":"#for-loop","text":"for(int i = 0, i <= 5, i++) { Console.WriteLine(int); }","title":"For loop"},{"location":"#while-loop","text":"Not guaranteed to run atleast once like do while int i = 0; while(i <= 5) { Console.Writeline(i); i += 1; }","title":"While loop"},{"location":"#do-while-loop","text":"guaranteed to run the first loop int i = 0; do { Console.WriteLine(i); } while ( i < 5);","title":"Do while loop"},{"location":"#reference-vs-value-types","text":"static void addOne(ref int num) { Console.WriteLine($\"value inside addOne {num}\"); } static void Main(string[] args) { int num = 0; addOne(ref num); Console.WriteLine($\"original value: {num}\"); }","title":"Reference vs Value Types"},{"location":"#null-coalescing","text":"var a = variable ?? defaultVariable Person person = null; Person newPerson = person ?? new Person(\"Default\", \"Person\"); Console.WriteLine(Person.FirstName);","title":"Null coalescing"},{"location":"#constants-vs-readonly","text":"Constants Readonly Implicit static Not implicit static Constant must be initialised Does not need to be initialised Cannot hold custom types Can hold custom types class Program { public const string someText = \"This is text\"; public static readonly string someOtherText = \"Other text\"; static void Main(string[] args) { Console.WriteLine(someText); } }","title":"Constants vs readonly"},{"location":"#files","text":"","title":"Files"},{"location":"#write-files","text":"string[] lines = {\"first line\", \"second line\", \"third line\"}; File.WriteAllLines(\"myFirstFile.txt\", lines);","title":"write files"}]}